{"version":3,"sources":["UI/DeleteButton/ActionButtons.js","App.js","reportWebVitals.js","index.js","App.module.css","UI/DeleteButton/ActionButtons.module.css"],"names":["ActionButtons","props","buttonType","elementType","className","classes","delete","onClick","deleteItem","edit","editItem","save","saveItem","add","addItem","Fragment","App","useState","JSON","parse","localStorage","getItem","allItems","setItems","name","setName","type","setType","color","setColor","inputName","setInputName","inputType","setInputType","inputColor","setInputColor","status","rowKey","onEditMode","setOnEditMode","table","tableHead","rowNumber","rowAction","map","entry","index","data","id","value","onChange","event","target","placeholder","setItem","stringify","onSave","splice","closest","currentName","currentColor","onClickEditButton","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.55d9eb14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from './ActionButtons.module.css'\r\n\r\nconst ActionButtons = (props) => {\r\n\r\n    let buttonType = null;\r\n\r\n    switch (props.elementType) {\r\n        case ('delete'):\r\n            buttonType = <button\r\n                className={classes.delete}\r\n                onClick={props.deleteItem}\r\n            >Delete</button>;\r\n            break;\r\n        case ('edit'):\r\n            buttonType =<button\r\n                className={classes.edit}\r\n                onClick={props.editItem}\r\n            >Edit</button>;\r\n            break;\r\n        case ('save'):\r\n            buttonType =<button\r\n                className={classes.save}\r\n                onClick={props.saveItem}\r\n            >Save</button>;\r\n            break;\r\n        case ('add'):\r\n            buttonType =<button\r\n                className={classes.add}\r\n                onClick={props.addItem}\r\n            >Add Item</button>;\r\n            break;\r\n        default:\r\n            <span\r\n                \r\n            >Delete</span>;\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {buttonType}\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default ActionButtons;","import React, { useState } from 'react';\nimport classes from './App.module.css';\nimport ActionButtons from './UI/DeleteButton/ActionButtons'\n\nconst App = () => {\n  const [allItems, setItems] = useState(JSON.parse(localStorage.getItem(\"allEntries\")))\n  const [name, setName] = useState('');\n  const [type, setType] = useState('');\n  const [color, setColor] = useState('');\n  const [inputName, setInputName] = useState('');\n  const [inputType, setInputType] = useState('');\n  const [inputColor, setInputColor] = useState('');\n  const [onEditMode, setOnEditMode] = useState({\n    status: false,\n    rowKey: null\n  })\n\n  const addEntry = () => {\n    \n    allItems.push({\n      \"name\": inputName,\n      \"type\": inputType,\n      \"color\": inputColor,\n    });\n    localStorage.setItem(\"allEntries\", JSON.stringify(allItems));\n    setItems(JSON.parse(localStorage.getItem(\"allEntries\")));\n    setInputName('');\n    setInputType('');\n    setInputColor('');\n  }\n\n  const onClickDeleteButton = (event) => {\n    allItems.splice(event.target.closest('TR').id, 1)\n    localStorage.setItem(\"allEntries\", JSON.stringify(allItems))\n    setItems(JSON.parse(localStorage.getItem(\"allEntries\")))\n  }\n\n  const onClickEditButton = ({ id, currentName, currentColor }) => {\n    setOnEditMode({\n      status: true,\n      rowKey: id\n    });\n    setName(currentName);\n    setColor(currentColor);\n  };\n\n  const onSave = (index) => {\n    allItems[index] = {\n      \"name\": name,\n      \"type\": type,\n      \"color\": color,\n    }\n    localStorage.setItem(\"allEntries\", JSON.stringify(allItems))\n    setItems(JSON.parse(localStorage.getItem(\"allEntries\")))\n    setOnEditMode({\n      status: false,\n      rowKey: null\n    })\n    setName('');\n    setType('');\n    setColor('');\n  }\n\n  return (\n    <div className={classes.App}>\n      <table className={classes.table}>\n        <thead>\n          <tr className={classes.tableHead}>\n            <th className={classes.rowNumber}></th>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Color</th>\n            <th className={classes.rowAction}>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            allItems.map((entry, index) => (\n\n              <tr className={classes.data} id={index} key={index}>\n                <td>\n                  {index + 1}\n                </td>\n                <td>\n                  {\n                    onEditMode.status && onEditMode.rowKey === index ? (\n                      <input\n                        value={name}\n                        onChange={event => setName(event.target.value)}\n                        placeholder='Enter name' />\n                    ) : (\n                      entry.name\n                    )\n                  }\n                </td>\n                <td>\n                  {\n                    onEditMode.status && onEditMode.rowKey === index ? (\n                      <select value={type} onChange={event => setType(event.target.value)}>\n                        <option></option>\n                        <option>Main</option>\n                        <option>Side</option>\n                        <option>Lower</option>\n                      </select>\n                    ) : (\n                      entry.type\n                    )\n                  }\n                </td>\n                <td>\n                  {\n                    onEditMode.status && onEditMode.rowKey === index ? (\n                      <input\n                        onChange={event => setColor(event.target.value)}\n                        value={color}\n                        type='color'\n                      />\n                    ) : (\n                      entry.color\n                    )\n                  }\n                </td>\n                {\n                  onEditMode.status && onEditMode.rowKey === index ?\n                    (\n                      <ActionButtons\n                      elementType='save' \n                      saveItem={() => onSave(index, entry)}/>\n                    ) : (\n                      <td>\n                        <ActionButtons\n                          elementType='delete'\n                          deleteItem={entry => onClickDeleteButton(entry)} />\n                        <ActionButtons\n                          elementType='edit'\n                          editItem={() => onClickEditButton({ id: index, currentName: entry.name, currentColor: entry.color })} />\n                      </td>\n                    )\n                }\n              </tr>\n            ))}\n          <tr className={classes.data}>\n            <td></td>\n            <td>\n              <input\n              value={inputName}\n                onChange={event => setInputName(event.target.value)}\n                placeholder='Enter name' />\n            </td>\n            <td>\n              <select\n              value={inputType}\n                onChange={event => setInputType(event.target.value)}>\n                  <option></option>\n                <option>Main</option>\n                <option>Side</option>\n                <option>Lower</option>\n              </select>\n            </td>\n            <td>\n              <input\n              value={inputColor}\n                type='color'\n                onChange={event => setInputColor(event.target.value)} />\n            </td>\n\n          </tr>\n        </tbody>\n      </table>\n          <ActionButtons elementType='add' addItem={addEntry}>Add Item</ActionButtons>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3aBuA\",\"table\":\"App_table__4LPPZ\",\"tableHead\":\"App_tableHead__1hPeL\",\"data\":\"App_data__1rgjd\",\"rowNumber\":\"App_rowNumber__21n5p\",\"rowAction\":\"App_rowAction__3aD7S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"ActionButtons_delete__2-gJK\",\"edit\":\"ActionButtons_edit__39YdJ\",\"save\":\"ActionButtons_save__14mft\",\"add\":\"ActionButtons_add__2mYtm\"};"],"sourceRoot":""}